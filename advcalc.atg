import java.lang.Exception;
import java.util.ArrayList;
import java.util.List;

COMPILER AdvCalc
    Interpreter aci;
    public void setInterpreter(Interpreter aci)
    {
        this.aci = aci;
    }
CHARACTERS
    digit = "0123456789".
    letter = 'A'..'Z' + 'a'..'z'.
TOKENS
    number = digit {digit} [ '.' digit {digit} ].
    ident = letter {digit | letter }.
IGNORE '\n' + '\r' + '\t'

PRODUCTIONS
    AdvCalc (. ASTExp exp; .)
    = { CExp<out exp> (.
        try {
            ASTExp res = aci.eval(exp);
            System.out.println("  " + res);
        } catch (Exception e) {
            System.err.println("  Error: " + e.getMessage());}
        .)
    } EOF .

    CExp<out ASTExp v> (. v = null; .) = Def<out v> | Exp<out v> | Seq<out v>.

    Seq<out SeqExp e> (. e = new SeqExp(); ASTExp e1 = null; .)
    = "{" Def<out e1> (. e.add(e1); .) ";" { Def<out e1> (. e.add(e1); .) ";" }
    Exp<out e1> (. e.res = e1; .) "}".

    Def<out ASTExp e> (. e = null;
                         ASTExp e2 = null; .)
    = "def" ident (. String name = t.val; .)
    ( "(" ParamNames<.out List<String> p.> (. e = new DefFunc(name, p); .) ")"
    | (. e = new DefVar(name); .) )
    "=" (Exp<out e2> | Seq<out e2>) (. e.left = e2; .).

    ParamNames<.out List<String> paramsList.> (. paramsList = new ArrayList<String>(); .)
    = ident (. paramsList.add(t.val); .) { "," ident (. paramsList.add(t.val); .) }.

    Exp<out ASTExp e> (. Operator op;
                         ASTExp e2; .)
    = T<out e> { ( "+" (. op = Operator.ADD; .) T<out e2>
    | "-" (. op = Operator.SUB; .) T<out e2> ) (. e = new BinExp(e, op, e2); .) }.

    T<out ASTExp e> (. Operator op;
                       ASTExp e2; .)
    = U<out e> { ( "*" (. op = Operator.MUL; .) U<out e2>
    | "/" (. op = Operator.DIV; .) U<out e2>
    | "%" (. op = Operator.RST; .) U<out e2> )
    (. e = new BinExp(e, op, e2); .) }.

    U<out ASTExp e> (. e = null;
                       Operator op; .)
    = ("-" (. op = Operator.SUB; .) F<out e> (. e = new UnaryExp(op, e); .)
    | F<out e> ) .

    F<out ASTExp e> (. e = null; .)
    = number (. e = new NumberConst(Double.parseDouble(t.val)); .)
    | VarOrFunc<out e>
    | IFExp<out e>
    | "(" Exp<out e> ")" .

    VarOrFunc<out ASTExp e> (. e = null;
                               ASTExp e1; .)
    = ident (. String name = new String(t.val); .)
    ( "(" Params<.out List<ASTExp> expList.> (. e = new Func(name, expList); .) ")"
    | (. e = new Var(name); .) ).

    Params<.out List<ASTExp> expList.> (. expList = new ArrayList<ASTExp>();
                                          ASTExp e1, e2; .)
    = Exp<out e1> (. expList.add(e1); .)
    { "," Exp<out e2> (. expList.add(e2); .) }.

    IFExp<out ASTExp e> (. e = null;
                           ASTExp e2, e3; .)
    = "if" ExpL<out e> "then" Exp<out e2> "else" Exp<out e3> (. e = new IfExp(e, e2, e3); .).

    ExpL<out ASTExp e> (. e = null;
                          OpRel op;
                          ASTExp e2; .)
    = Exp<out e> OpRel<out op> Exp<out e2> (. e = new ExpL(op, e, e2); .).

    OpRel<out OpRel op> (. op = null; .)
    = ">" (. op = OpRel.GTR; .)
    | ">=" (. op = OpRel.GEQL; .)
    | "<" (. op = OpRel.LSS; .)
    | "<=" (. op = OpRel.LEQL; .)
    | "=" (. op = OpRel.EQL; .)
    | "!=" (. op = OpRel.DIF; .).
END AdvCalc.
